#!/usr/bin/env bash
# hyprmonitor.sh - A utility for managing Hyprland monitor configurations
# Uses YAD (Yet Another Dialog) for GUI
# Enhanced version with monitor config generation and management

# Configuration
HYPR_CONFIG_DIR="$HOME/.config/hypr"
MONITORS_CONFIG_FILE="$HYPR_CONFIG_DIR/monitors.conf"

# Check if YAD is installed
if ! command -v yad &> /dev/null; then
    echo "Error: YAD is not installed. Please install it first."
    echo "On most distributions: sudo apt install yad / sudo pacman -S yad / sudo dnf install yad"
    exit 1
fi

# Check if hyprctl is available (to ensure we're in Hyprland)
if ! command -v hyprctl &> /dev/null; then
    echo "Error: hyprctl not found. Are you running Hyprland?"
    exit 1
fi

# Check if jq is available
if ! command -v jq &> /dev/null; then
    echo "Error: jq not found. Please install jq for JSON parsing."
    echo "On most distributions: sudo apt install jq / sudo pacman -S jq / sudo dnf install jq"
    exit 1
fi

# Get monitor information using hyprctl
get_monitor_info() {
    # Get the raw monitor information
    local monitor_data=$(hyprctl monitors -j)

    # Extract and format the data for YAD display
    echo "$monitor_data" | jq -r '.[] |
        .name + "|" +
        (.width|tostring) + "x" + (.height|tostring) + "@" + (.refreshRate|tostring) + "|" +
        "Scale: " + (.scale|tostring) + "|" +
        "Position: " + (.x|tostring) + "x" + (.y|tostring) + "|" +
        (.description // "Unknown")'
}

# Generate monitor configuration for Hyprland
generate_monitor_config() {
    local monitor_data=$(hyprctl monitors -j)

    echo "$monitor_data" | jq -r '.[] |
        "monitor=" + .name + "," +
        (.width|tostring) + "x" + (.height|tostring) + "@" + (.refreshRate|round|tostring) + "," +
        (.x|tostring) + "x" + (.y|tostring) + "," +
        (.scale|tostring)'
}

# Create monitors.conf file if it doesn't exist
ensure_monitors_config() {
    if [ ! -f "$MONITORS_CONFIG_FILE" ]; then
        mkdir -p "$HYPR_CONFIG_DIR"
        touch "$MONITORS_CONFIG_FILE"
        echo "# Hyprland monitor configuration" > "$MONITORS_CONFIG_FILE"
        echo "# Generated by hyprmonitor.sh" >> "$MONITORS_CONFIG_FILE"
        echo "" >> "$MONITORS_CONFIG_FILE"
    fi
}

# Check if monitors.conf is sourced in main config
check_source_line() {
    local main_config="$HYPR_CONFIG_DIR/hyprland.conf"
    local source_line="source = ~/.config/hypr/monitors.conf"

    if [ -f "$main_config" ]; then
        if ! grep -q "source.*monitors\.conf" "$main_config"; then
            yad --center --title="Configuration Notice" \
                --text="<b>Important:</b> Add this line to your hyprland.conf to enable monitor config loading:\n\n<tt>$source_line</tt>" \
                --text-align=center \
                --width=500 \
                --button="Copy Line:bash -c 'echo \"$source_line\" | $CLIPBOARD_CMD'" \
                --button="Add Automatically:2" \
                --button="Skip:0"

            local response=$?
            if [ $response -eq 2 ]; then
                echo "" >> "$main_config"
                echo "# Source monitor configuration" >> "$main_config"
                echo "$source_line" >> "$main_config"
                yad --center --title="Success" --text="Source line added to hyprland.conf" --button="OK:0"
            fi
        fi
    fi
}

# Save current monitor configuration
save_current_config() {
    local config_output=$(generate_monitor_config)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    ensure_monitors_config

    # Backup existing config
    if [ -s "$MONITORS_CONFIG_FILE" ]; then
        cp "$MONITORS_CONFIG_FILE" "${MONITORS_CONFIG_FILE}.backup.$(date +%s)"
    fi

    # Write new config
    {
        echo "# Hyprland monitor configuration"
        echo "# Generated by hyprmonitor.sh on $timestamp"
        echo ""
        echo "$config_output"
        echo ""
        echo "# Fallback for unknown monitors"
        echo "monitor=,preferred,auto,1"
    } > "$MONITORS_CONFIG_FILE"

    yad --center --title="Configuration Saved" \
        --text="Monitor configuration saved to:\n<tt>$MONITORS_CONFIG_FILE</tt>\n\nWould you like to reload Hyprland now?" \
        --text-align=center \
        --button="Reload Hyprland:0" \
        --button="Just Close:1"

    local response=$?
    if [ $response -eq 0 ]; then
        hyprctl reload
        yad --center --title="Reloaded" --text="Hyprland configuration reloaded!" --button="OK:0"
    fi
}

# Show current monitor configuration file
show_current_config() {
    if [ -f "$MONITORS_CONFIG_FILE" ]; then
        yad --center \
            --title="Current monitors.conf" \
            --text="<b>Current Monitor Configuration File:</b>" \
            --text-info \
            --filename="$MONITORS_CONFIG_FILE" \
            --width=600 \
            --height=300 \
            --button="Edit File:bash -c '\${EDITOR:-nano} \"$MONITORS_CONFIG_FILE\"'" \
            --button="Reload Hyprland:bash -c 'hyprctl reload && yad --center --title=\"Reloaded\" --text=\"Configuration reloaded!\" --button=\"OK:0\"'" \
            --button="Close:0"
    else
        yad --center --title="No Configuration" \
            --text="No monitors.conf file found.\nUse 'Save Current Setup' to create one." \
            --button="OK:0"
    fi
}

# Create a YAD dialog to display monitor information
show_monitor_info() {
    local monitor_info=$(get_monitor_info)

    # If no monitors found
    if [ -z "$monitor_info" ]; then
        yad --center --title="Hyprland Monitor Info" --text="No monitors detected." --button="Close:0"
        return
    fi

    # Create the YAD dialog with monitor information
    echo "$monitor_info" | yad --center \
        --title="Hyprland Monitor Information" \
        --text="<b>Currently Active Monitors</b>" \
        --text-align=center \
        --list \
        --separator="" \
        --column="Monitor Name" \
        --column="Resolution" \
        --column="Scale" \
        --column="Position" \
        --column="Description" \
        --width=800 \
        --height=300 \
        --button="View Config:3" \
        --button="Save Current Setup:2" \
        --button="Generate Config:1" \
        --button="Close:0"

    local response=$?
    case $response in
        1) show_generated_config ;;
        2) save_current_config ;;
        3) show_current_config ;;
    esac
}

# Show generated configuration without saving
show_generated_config() {
    local config_output=$(generate_monitor_config)

    echo "$config_output" | yad --center \
        --title="Generated Monitor Configuration" \
        --text="<b>Generated Monitor Configuration</b>\nPreview of what would be saved:" \
        --text-info \
        --width=600 \
        --height=250 \
        --button="Copy to Clipboard:bash -c 'echo \"$config_output\" | $CLIPBOARD_CMD'" \
        --button="Save This Config:2" \
        --button="Back to Main:1" \
        --button="Close:0"

    local response=$?
    case $response in
        1) show_monitor_info ;;
        2) save_current_config ;;
    esac
}

# Main menu
show_main_menu() {
    yad --center \
        --title="Hyprland Monitor Manager" \
        --text="<b>Hyprland Monitor Configuration Manager</b>\nChoose an action:" \
        --text-align=center \
        --width=400 \
        --height=200 \
        --list \
        --separator="" \
        --column="Action" \
        --column="Description" \
        "View Active Monitors|Show currently active monitor setup" \
        "Save Current Setup|Save active monitors to config file" \
        "View Config File|Show current monitors.conf file" \
        "Generate Preview|Preview config without saving" \
        --button="Execute:0" \
        --button="Quit:1"

    local response=$?
    if [ $response -eq 1 ]; then
        exit 0
    fi

    # Get selected action (this is a bit hacky but works with YAD)
    local selection=$(yad --center \
        --title="Hyprland Monitor Manager" \
        --text="<b>Hyprland Monitor Configuration Manager</b>\nChoose an action:" \
        --text-align=center \
        --width=400 \
        --height=200 \
        --list \
        --print-column=1 \
        --separator="" \
        --column="Action" \
        --column="Description" \
        "View Active Monitors|Show currently active monitor setup" \
        "Save Current Setup|Save active monitors to config file" \
        "View Config File|Show current monitors.conf file" \
        "Generate Preview|Preview config without saving")

    case "$selection" in
        "View Active Monitors") show_monitor_info ;;
        "Save Current Setup") save_current_config ;;
        "View Config File") show_current_config ;;
        "Generate Preview") show_generated_config ;;
        *) show_monitor_info ;;  # Default fallback
    esac
}

# Add clipboard functionality
check_clipboard_tools() {
    # Check for wl-copy (Wayland) first, then xclip (X11) as fallback
    if command -v wl-copy &> /dev/null; then
        CLIPBOARD_CMD="wl-copy"
    elif command -v xclip &> /dev/null; then
        CLIPBOARD_CMD="xclip -selection clipboard"
    else
        yad --center --title="Missing Dependency" \
            --text="Neither wl-copy nor xclip is installed. Copy to clipboard functionality will not work.\nPlease install wl-clipboard (recommended for Wayland) or xclip for this feature." \
            --button="OK:0"
        CLIPBOARD_CMD="cat > /dev/null"  # Fallback that does nothing
    fi
}

# Main function
main() {
    # Initialize clipboard command
    CLIPBOARD_CMD="cat > /dev/null"  # Default fallback

    # Check for clipboard tools
    check_clipboard_tools

    # Check if monitors.conf is properly sourced
    check_source_line

    # Show main menu or monitor info based on arguments
    if [ "$1" == "--menu" ] || [ "$1" == "-m" ]; then
        show_main_menu
    else
        show_monitor_info
    fi
}

# Show help
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    echo "Hyprland Monitor Configuration Manager"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help    Show this help message"
    echo "  -m, --menu    Show main menu instead of monitor info"
    echo ""
    echo "This script helps manage Hyprland monitor configurations safely by:"
    echo "  • Displaying current monitor information"
    echo "  • Generating monitor config snippets"
    echo "  • Saving configurations to separate monitors.conf file"
    echo "  • Managing the source line in hyprland.conf"
    echo ""
    echo "Config file location: ~/.config/hypr/monitors.conf"
    exit 0
fi

main "$@"
